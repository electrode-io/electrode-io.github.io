---
title:  "Build More + Deploy"
permalink: docs/build_more.html
toplevel: "Getting Started: Quick Guide"
---
###Here at WalmartLabs we love to build!

Navigate to `<your-awesome-app>/client/components/home.jsx`:

```javascript
import React from "react";

export class Home extends React.Component {
  render() {
    return (
      <div><h1>Hello <a href="https://github.com/electrode-io">Electrode</a></h1></div>
    );
  }
}
```

We'll need a place to keep all of the resources we learned in the [Getting Started: Quick Guide](quick_guide.html) organized. Let's make a library for our present stack and exciting technologies! Copy the code below and paste it into `<your-awesome-app>/client/components/home.jsx`:

```javascript
import React from "react";

export const imageUrls = [
  'http://daynin.github.io/clojurescript-presentation/img/react-logo.png',
  'https://raw.githubusercontent.com/reactjs/redux/master/logo/logo.png',
  'http://freevector.co/wp-content/uploads/2014/04/webpack.png',
  'http://hapijs.com/public/img/logo.svg',
  'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/Emoji_u26a1.svg/2000px-Emoji_u26a1.svg.png'
];

export var i=0;

export class Home extends React.Component {
  renderImage(imageUrl, i) {
    return (
        <img key={i} src={imageUrl} width="10%" height="10%"/>
    );
  }
  render() {
    return (
      <div>
        <h1>Hello <a href="https://github.com/electrode-io">Electrode</a></h1>
        <div> <p>Our beloved friends</p></div>
        <div className="images">
          {imageUrls.map(imageUrl => this.renderImage(imageUrl, ++i))}
        </div>
      </div>
    );
  }
}
```

Let's finish the UI by adding styles. Navigate to `<your-awesome-app>/client/styles/base.css` and add the code below:

```css
h1 {
  font-size: 16px;
  color: red;
}

p {
    font-family: "Comic Sans MS", cursive, sans-serif;
}

a {
  font-size: 14px;
  color: red;
}

a:hover {
  color: blue;
}

.resource {
  margin-bottom: 10px;
}

.title {
  border-bottom: 2px solid blue;
  text-align: center;
}

```

Run our new favorite command to see your tech list:

```bash
gulp dev
```

**Site should look like the following screenshot**

![Pastel](http://i.imgur.com/nwEl64l.png)

### Deploy

We're almost finished. The final step is to deploy your-awesome-app and share it with your fellow developers using [Heroku] (https://devcenter.heroku.com/categories/deployment). We have listed the steps below, but feel free to learn more about Heroku [here] (https://devcenter.heroku.com/articles/getting-started-with-nodejs#introduction). These instructions assume you have a GitHub account. Navigate to your GitHub and create a new repo 'Your-Awesome-App'. Hit the `clone your-awesome-repo` and follow the steps below in order:</p>

```bash
$ git init
$ git add .
$ git commit -m 'first commit'
$ git remote add origin https://github.com/your-Github-name/your-awesome-app.git
$ git push -u origin master
```

Navigate to the [Heroku site](https://signup.heroku.com/dc) and set up a free account. This will help streamline our deployment process (we will do this several times).

Next, let's quickly deploy `your-awesome-app` from the command line. [Click here](https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up") to download and install the Heroku CLI for your machine.

When you are finished installing, log in using the email address and password you used when creating your Heroku account.

```bash
$ heroku login
```

Enter your Heroku credentials:

```bash
Email: your-example-email@walmartlabs.com
Password:
```

You should see a terminal message `Logged in as your-example-email@walmartlabs.com`. Now, let's deploy!

We need to specify the [version of node](https://devcenter.heroku.com/articles/node-best-practices) you are using on your machine into our `package.json`. Add the code below the `author` section and before the `contributors` section of your `package.json`:

```json
    "engines": {
      "node": "4.2.x"
    },
```

It should now look like this:

```
{
  "name": "your-awesome-app",
  "version": "0.0.0",
  "description": "your-app-description",
  "homepage": "your-awesome-app",
  "author": {
    "name": "your-name",
    "email": "your-email-address@email.com,
    "url": "your-app-url"
  },
  "engines": {
    "node": "4.2.x"
  },
  "contributors": [],
  "files": [
    "lib"
  ],
  "main": "lib/index.js",
  "keywords": [
    "test"
  ],
  "repository": {
    "type": "git",
    "url": "your-repo-url"
  },
  "license": "Apache-2.0",
  "scripts": {
    "test": "gulp test",
    "coverage": "gulp check"
  },
  "dependencies": {
    "bluebird": "^2.10.2",
    "electrode-router-resolver-engine": "^1.0.0",
    "electrode-server": "^1.0.0",
    "electrode-static-paths": "^1.0.0",
    "lodash": "^4.10.1"
  },
  "devDependencies": {
    "electrode-archetype-react-app": "^1.0.0",
    "electrode-archetype-react-app-dev": "^1.0.0",
    "gulp": "^3.9.1"
  }
}
```

Create an app on Heroku (which prepares Heroku to receive your source code). This will also create a git remote called heroku and generate a random name:

```bash
$ heroku create
```

Or you can also create an app that will generate a your app's name (if it is available):

```bash
$ heroku create your-awesome-app
```

Deploy your code:

```bash
$ git push heroku master
```

Visit the app at the generated URL by using this command:

```bash
$ heroku open
```
One last thing we can do is define a [Procfile](https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile), a text file to explicitly declare what command can start your-awesome-app. Create a file name `Procfile` in your root directory. Add the code below:

```
web: node index.js
```

Deploy this latest code:

```bash
$ git push heroku master
```

And... you did it! We will build even more in our [Getting Started: Intermediate](create_standalone_component.html) and cover complex topics like routing, server plugins and other powerful deployment software.
