---
title:  "Glossary"
permalink: docs/glossary.html
toplevel: "Resources"
---

<br />

* **Archetypes** - Archetypes are encapsulated boilerplates for centralizing your project configurations, workflows and dependencies. An archetype is an npm module template, which is a “superclass” of a module, think inheritance for npm modules but not one that is used to generate code files and then discarded.

* **Caching** - is a process of storing data locally in order to speed up
subsequent retrievals.

* **Child component** - is any component that is contained in a parent component.

* **Container based technology** - is an approach to virtualization in which
the virtualization layer runs as an application within the operating system (OS).
In this approach, the operating system's kernel runs on the hardware node with
several isolated guest virtual machines (VMs) installed on top of it.
The isolated guests are called containers.

* **Cross Site Request Forgery (CSRF)** - is an attack that forces an end user
to execute unwanted actions on a web application in which they're currently
authenticated. CSRF attacks specifically target state-changing requests, not
theft of data, since the attacker has no way to see the response to the forged
request.

* **Hashing** - is the transformation of a string of characters into a usually
shorter fixed-length value or key that represents the original string.

* **Linting** - is the process of running a program that will analyze code for
potential errors.

* **Local scope** - is a CSS Modules feature that keeps classes local to the
specified file, and does not pollute the global namespace.

* **Markup** - a notation used to annotate a document's content to give
information regarding the structure of the text or instructions for how it is
to be displayed.

* **Metadata extractor** - is a type of tooling that retrieves meta data
information from various packages.

* **Module tree** - is a directory tree like structure of all the package
dependencies of a particular npm/node module.

* **Multi instance** - is a type of architecture where multiple customers run
their own separate instance of an application and operating system running on
a separate virtual machine, all on a common hardware platform.

* **Platform agnostic** - is software was runs on any combination of operating
system and underlying processor architecture.

* **Predictable state container** - is an object that stores the state of the
entire app where the only way to change the state tree is to emit an action.
Also known as Redux.

* **Profiling** - is a form of dynamic program analysis that measures,
for example, the space (memory) or time complexity of a program, the usage of
particular instructions, or the frequency and duration of function calls.

* **Promise** - is an object used for asynchronous computations It represents
a value that may be available now, in the future or never.

* **React Data Id** - is a custom attribute used so that React can uniquely
identify its components within the Document Object Model(DOM).

* **Rendering Engine** - is a program that renders marked up content.

* **Route Handler** - is a method or function that is executed when a certain
route was requested. It usually handles the request and returns the necessary
HTML to the client.

* **Routing** - is the process of selecting the best paths in a network.

* **Scaffolding tool** - is a tool used to generate a set of files, folders
and configurations that follow the most common best practices to start a new
project or component.

* **Server Side Rendering** - a process where the initial request loads the page,
layout, CSS, JavaScript and content. For subsequent updates to the page, the
client-side rendering approach repeats the steps it used to get the initial content.

* **Stub** - is a piece of code used to stand in for some other programming
functionality.

* **Transform** - to change in composition or structure.

* **Transpile** -  is a type of compilation process that takes the source code
of a program written in one programming language as its input and produces
the equivalent source code in another programming language.
