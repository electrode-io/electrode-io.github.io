---
title:  "Create a Standalone Component"
permalink: docs/create_standalone_component.html
toplevel: "Getting Started: Intermediate"
---

First things first. Let's make our thing... a Thing! In this Getting Started: Intermediate guide, we’ll take some of the basics we explored in our [Quick Start](quick_guide.html) and go further. We will make our resource list a dynamic list that is styled, tested, published and capable of being deployed with other deployment software like Azure, Docker and Kubernetes.

Again, we are leveraging [Yeoman](http://yeoman.io/) to quick start the creation of our first stand alone component. We will globally install the Electrode [generator-electrode-component](https://github.com/electrode-io/generator-electrode-component):

```bash
$ npm install -g generator-electrode-component
```

Then [generate] (https://github.com/electrode-io/generator-electrode-component) your new component:

```bash
$ yo electrode-component
```

Fill out the Electrode generator-electrode-component with your information.

Open the application up with your favorite text editor. We'll start with a fast high level view of the most important files in your component:

```
  demo
    A live demo of your component. You can play with its integration in real
    time. This folder contains the .example files which you can customize to
    demonstrate the default state of your components when mounted in the
    playground.

  node_modules
    Other Javascript files contained in modules that we will use in this
    application, including Electrode modules that create your out-of-the-box
    Universal app.

  src
    Where all our components' source code lives, in their respective files.
    Non-universal apps might normally call this the “client” folder, but
    since our app code will run both on the client and server, via server
    side rendering, we call this folder "src".

  test
  Test driven development is the WalmartLabs way and critical for successful
  growth and scaling. All testing code lives in this folder and we will focus
  on unit testing with Mocha + Enzyme soon.
    |_client
      |_components
        |_helpers
      |_.eslintrc
        A configuration file that sets our custom linting rules and basic syntax
        validation. In this case it is extended from the
        electrode-archetype-react-component.

  gulpfile.js
    Gulp is a Javascript build tool that lets us automate tasks and the
    gulpfile.js is where we define those tasks. We like its simple syntax
    and the increased productivity from using an intuitive task runner.

```

Now that we have basic structure of the component. Lets build a sample component by following below steps.

1. [Develop couple of low-level components](#develop-couple-of-low-level-components)
2. [Develop helpers for the components](#develop-helpers-for-the-components)
3. [Develop styles using CSS modules](#develop-styles-using-css-modules)
4. [Develop main high-level component](#develop-main-high-level-component)
5. [Develop tests for the above components](#develop-tests-for-the-above-components)
6. [Add Demo data](#Add-Demo-data)
7. [Build and Demo the component](#build-and-demo-the-component)
8. [Generating documentation](#generating-documentation)

Trust me, it will be worth it.

###Develop couple of low-level components
Create a file titled: `<your-awesome-component>/src/components/guest-list.jsx`. Copy the code from below into this file:

```javascript
  import React from "react";

  import styles from "../../src/styles/guest-list.css";

  const GuestList = ({invitees, toggleGuest}) => {

    const renderInvitees = (inviteesArr) => {
      return inviteesArr.map((invitee) => (
        <div key={invitee.name} className={styles.guestName}>
          <input
            id={invitee.name}
            type="checkbox"
            checked={invitee.invited}
            onChange={() => toggleGuest(invitee)}/>
          <label htmlFor={invitee.name}>
            {invitee.name}
          </label>
        </div>
      ));
    };

    return (
      <div className={styles.guestList}>
        <h1>Guest List:</h1>
        {renderInvitees(invitees)}
      </div>
    );

  };

  GuestList.propTypes = {
    invitees: React.PropTypes.array,
    toggleGuest: React.PropTypes.func
  };

  export default GuestList;
```

Create a file titled: `<your-awesome-component>/src/components/render-friend.jsx`. Copy the code from below into this file:

```javascript
  import React from "react";

  import styles from "../../src/styles/render-friend.css";
  import style from "../helpers/graph-styles";

  const DEFAULT_SIZE = 15;
  const DEGREES_OF_COOL = 360;

  const RenderFriend = ({friend, styleObj, className}) => {

    const { name, img, profile, friends } = friend;
    let { size } = friend;
    const parentFriend = { name, img, profile };
    size = size ? size : DEFAULT_SIZE;

    const bgImg = {backgroundImage: `url(${img})`};
    let applyStyle = styleObj
      ? Object.assign(bgImg, styleObj)
      : Object.assign(bgImg, style("single", size));

    applyStyle = friends ? style("container", size) : applyStyle;
    let applyClass = friends ? styles.join : styles.friend;
    applyClass = styleObj ? applyClass : `${applyClass} ${styles.join} ${className || ""}`;

    const renderFriends = (friendsArr) => {
      const angleVal = (DEGREES_OF_COOL / friendsArr.length);
      let rotateVal = 0;

      return friendsArr.map((friendObj) => {
        rotateVal += angleVal;
        return (
          <RenderFriend
            key={friendObj.name}
            friend={friendObj}
            styleObj={style("child", size, rotateVal)}/>
          );
      });
    };

    return (
      <div className={applyClass} style={applyStyle}>
        {!!friends && renderFriends(friends)}
        {!!friends && <RenderFriend friend={parentFriend} styleObj={style("parent", size)}/>}
      </div>
    );
  };

  RenderFriend.propTypes = {
    friend: React.PropTypes.object,
    styleObj: React.PropTypes.object
  };

  export default RenderFriend;

```

###Develop helpers for the components
In `src` create a folder titled `helpers` with file titled `graph-styles.js` inside - `<your-awesome-component>/src/helpers/graph-styles.js`. Copy the code from below into this file:

```javascript
  const PARENT = {divisor: 2};
  const CHILD = {divisor: 4, rotateBack: -1};
  const SINGLE = {marginDivisor: 8};
  const CONTAINER = {paddingDivisor: .13, marginDivisor: .13};


  export default (type, size, rotateVal) => {

    const nodeSize = type === "child" ? (size / CHILD.divisor) : (size / PARENT.divisor);

    const parentOrSingle = {
      width: `${nodeSize}em`,
      height: `${nodeSize}em`,
      margin: `-${nodeSize / PARENT.divisor}em`,
      display: `block`,
      position: `absolute`,
      top: `50%`,
      left: `50%`,
      transform: `translate(0em)`
    };

    switch (type) {

    case "single": {
      const singleNode = {
        display: `inline-block`,
        position: `relative`,
        margin: `${nodeSize / SINGLE.marginDivisor}em`
      };
      ["width", "height"].map((prop) => singleNode[prop] = parentOrSingle[prop]);
      return singleNode;
    }

    case "child": {
      const childNode = {
        transform: `rotate(${rotateVal * 1}deg) translate(${nodeSize * PARENT.divisor}em) rotate(${rotateVal * CHILD.rotateBack}deg)`, // eslint-disable-line max-len
        backgroundSize: `100%`
      };
      return Object.assign(parentOrSingle, childNode);
    }

    case "container": {
      return {
        position: `relative`,
        width: `${size}em`,
        height: `${size}em`,
        padding: `${size * CONTAINER.paddingDivisor}em`,
        borderRadius: `50%`,
        display: `inline-block`,
        margin: `${size * CONTAINER.marginDivisor}em`
      };
    }

    default: {
      return parentOrSingle;
    }
    }
  };
```

###Develop styles using CSS modules

Let's also add some style elements using [CSS modules](https://github.com/css-modules/css-modules) to create a dynamic application. Override the below code into your `<your-awesome-component>/src/style/your-awesome-component.css`:

```css
body {
  font-family: sans-serif;
}

p {
  padding: 15px;
}
@keyframes partyLights {
  0%{background-position:0% 51%}
  50%{background-position:100% 50%}
  100%{background-position:0% 51%}
}

@keyframes shake {
  from {
    transform: scale3d(1, 1, 1);
  }
  10%, 20% {
    transform: scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg);
  }
  30%, 50%, 70%, 90% {
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);
  }
  40%, 60%, 80% {
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);
  }
  to {
    transform: scale3d(1, 1, 1);
  }
}

.party {
  animation-name: shake;
  animation-duration: 1s;
  animation-fill-mode: both;
  animation-iteration-count: infinite;
}

.houseParty {
	-webkit-clip-path: polygon(2% 97%, 98% 97%, 98% 44%, 51% 8%, 3% 45%);
  clip-path: polygon(2% 97%, 98% 97%, 98% 44%, 51% 8%, 3% 45%);
  background: linear-gradient(269deg, #ff90f1, #27ff8f, #6db0ff, #a398ff);
  background-size: 800% 800%;
  animation: partyLights 5s ease infinite;
  min-height: 12em;
}

.house {
  clip-path: polygon(2% 97%, 98% 97%, 98% 44%, 51% 8%, 3% 45%);
  background-color: #474747;
  padding: 10em 2em 2em 2em;
  border-radius: 10px;
  min-height: 35vh;
}

.container {
  width: 50vw;
  margin-left: auto;
  margin-right: auto;
  margin-top: 10%;

  position: relative;
  transition: filter .7s ease-in-out;
}

.container:before {
  content: '';
  display: block;
  position: absolute;
  background-image: url(//goo.gl/l01JZJ);
  background-position: center;
  background-size: 95%;
  background-repeat: no-repeat;
  width: 45%;
  height: 45%;
  z-index: 999;
  left: 47%;
  top: -9%;
}

.room {
  position: absolute;
  bottom: 0;
  right: 0;
  padding: 2em;
  padding-right: 2.5em;
}

.message {
  display: block;
  position: absolute;
  width: 19em;
  height: 11em;
  z-index: 999;
  left: 4.5em;
  top: 7.5em;
  color: white;
  font-weight: 100;
  font-family: helvetica;
  font-size: 27px;
}

a, a:hover, a:active, a:visited {
  color: rgb(93, 245, 255);
  text-decoration: none;
}
```
Create a file titled: `<your-awesome-component>/src/styles/guest-list.css`. Copy the code from below into this file:

```css
@import url(//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css);

label { font-size: 2em; }
input[type=checkbox] { display:none; }
input[type=checkbox] + label:before {
  font-family: FontAwesome;
  display: inline-block;
}
input[type=checkbox] + label:before { content: "\f096"; }
input[type=checkbox] + label:before { letter-spacing: 10px; }
input[type=checkbox]:checked + label:before { content: "\f046"; }
input[type=checkbox]:checked + label:before { letter-spacing: 5px; }

.guestList {
  position: absolute;
  z-index: 999;
  background-color: rgba(255, 255, 255, 0.93);
  left: 10%;
  border: 2px solid whitesmoke;
  display: inline-block;
  padding-left: 4em;
  padding-right: 4em;
  padding-bottom: 3em;
  padding-top: 1.7em;
  border-radius: 3px;
  margin: 2em;
}

.guestList h1 {
  font-size: 2.5em;
}

.guestName {
  margin-bottom: .5em;
}
```

Create a file titled: `<your-awesome-component>/src/styles/render-friend.css`. Copy the code from below into this file:

```css
@keyframes shake {
  from {
    transform: scale3d(1, 1, 1);
  }
  10%, 20% {
    transform: scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg);
  }
  30%, 50%, 70%, 90% {
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);
  }
  40%, 60%, 80% {
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);
  }
  to {
    transform: scale3d(1, 1, 1);
  }
}

.join {
  animation-name: shake;
  animation-duration: 1s;
  animation-fill-mode: both;
}

.friend {
  border-radius: 50%;
  background-color: #efefef;
  background-repeat: no-repeat;
  background-position: center;
  background-size: 60%;
  float: right;
}
```

###Develop main high-level component

Override the code in `<your-awesome-component>/src/components/your-awesome-component.jsx` with the code below. Change all references from the literal `your-awesome-component or YourAwesomeComponent` to your actual component name:

```javascript
import React, { Component, PropTypes } from "react";

import styles from "../../src/styles/your-awesome-component.css";
import RenderFriend from "./render-friend";
import GuestList from "./guest-list";

export default class YourAwesomeComponent extends Component {

  constructor(props) {
    super(props);
  }

  renderFriends(friends, party) {
    const invitees = this.props.invitees;
    const partyTime = party ? styles.party : "";

    return friends
      .filter((friend) => {
        return !!invitees.filter((invitee) => {
          return invitee.name === friend.name && invitee.invited;
        }).length;
      })
      .map((friend) => (
        <RenderFriend className={partyTime} key={friend.name} friend={friend}/>
      ));
  }

  viewState(view) {
    if (view) {
      return view;
    }
    return {
      intro: true,
      invite: true
    };
  }

  yourAwesomeComponent(invitees, party) {
    return party
      ? `${styles.yourAwesomeComponent} ${styles.house}`
      : styles.house;
  }

  render() {
    const { ourFriends, invitees, view, message, toggleGuest } = this.props;
    const party = invitees.length === invitees.filter((invitee) => invitee.invited).length &&
      invitees.length > 0;
    const { invite, intro } = this.viewState(view);
    const yourAwesomeComponent = this.yourAwesomeComponent(invitees, party);

    return (
      <div>
        {invite && invitees.length > 0 &&
          <GuestList invitees={invitees} toggleGuest={(invitee) => toggleGuest(invitee)}/>}
        <div className={styles.container}>
        {intro && !invitees.filter((invitee) => invitee.invited).length && message(styles.message)}
          <div className={yourAwesomeComponent}>
            <div className={styles.room}>
              {this.renderFriends(ourFriends, party)}
            </div>
          </div>
        </div>
      </div>
    );
  }
}

YourAwesomeComponent.displayName = "YourAwesomeComponent";

YourAwesomeComponent.propTypes = {
  ourFriends: PropTypes.array,
  message: PropTypes.func,
  invitees: PropTypes.array,
  view: PropTypes.object,
  toggleGuest: PropTypes.func
};

YourAwesomeComponent.defaultProps = {
  message: `<p>Let's party! Un-comment the all the commented-out lines in the
  playground then check the boxes on the GuestList to invite our friends to the party!</p>`
};
```
Last edit! In your `<your-awesome-component>index.js`, add the two lines below:

```javascript
  export { default as RenderFriend } from "./components/render-friend";
  export { default as GuestList } from "./components/guest-list";

```
###Develop tests for the above components

WalmartLabs believes that testing is critical to writing great, high performance code. This includes unit testing at both the component and application level. For your component, we are using [Mocha] (https://mochajs.org/), a Javascript testing framework that is perfect for running async tests, with [Enzyme] (http://airbnb.io/enzyme/docs/guides/mocha.html), airbnb's awesome testing utility for React.

```bash
  $ gulp check
```

###Add Demo data.
Create a file titled: `<your-awesome-component>/demo/examples/render-friend.example`. Copy, paste and save the code below into this file:

```
  <RenderFriend
    friend={
      {name: "John", img: "//goo.gl/dL5MXT"}
    } />
```

Create a file titled: `<your-awesome-component>/demo/examples/guest-list.example`. Copy, paste and save the code below into this file:

```
<GuestList
  invitees={[
  {name: 'John Smith', invited: false},
  {name: 'Jane Smith', invited: false},
  {name: 'Dan Jones', invited: false}
  ]}
  toggleGuest={(invitee) => alert(invitee.name)}
  />
```

Navigate to `<your-awesome-component>/demo/examples/your-awesome-component.example`. Add the code below between your component tags:

```
  <YourAwesomeComponent
  -insert code below here-
                    />.
```
It should look like this:

```
<YourAwesomeComponent
  ourFriends={[
   {name: "electrode", img: "//goo.gl/CZ4wAF", size: 12},
   {name: "hapi", img: "//goo.gl/q9uIFW", size: 12},
   {name: "React", img: "//goo.gl/dL5MXT", size: 12},
  ]}

  invitees={[
   {name: "electrode", invited: false},
   {name: "hapi", invited: false},
   {name: "React", invited: false}
  ]}

  toggleGuest={(invitee) => alert('Edit invitees array in playground to invite a guest!')}

  message={(c)=>(

  <div className={c}>Change key 'invited' to true in 'invitees' array in the playground
  above to invite guests!</div>

  )}
/>
```

###Build and Demo the component

Now run it and explore the live demo!

```bash
  $ gulp build && gulp demo
```

In the demo, you will first see a Guest List header with a checkbox listing all of our resources, now referred to as Friends:

![party-false](/img/party-component-false.png)


Have fun! Change key `invited` to true in `invitees` array. The Electrode stack is now like an awesome party, where all of our favorite technologies get invited:


![party-true](/img/party-component-true.png)

###Generating documentation
One of the final steps to Creating a Standalone Component is writing the correct documentation, in the form of component.json and component.md. The Electrode team has automated this step for you, using [Electrode-Docgen] (https://github.com/electrode-io/electrode-docgen). This is a custom metadata extractor for the Electrode framework. The commands have been built into the tasks of `<your-awesome-component>/gulpfile.js`:

```
const tasks = {
  "demo": ["generate", "server-dev"],
  "demo-iso": ["dev-iso"],
  "generate": ["generate-metadata", "generate-documentation"],
  "generate-documentation": () => exec(`electrode-docgen --package ./package.json --src ./src --markdown components.md`),
  "generate-metadata": () => exec(`electrode-docgen --package ./package.json --src ./src --metadata components.json`),
  "prepublish": ["npm:prepublish"],
  "preversion": ["check-cov"]
};
```

Simply run the commands below to auto generate the necessary docs:

To generate metadata:

```bash
 gulp generate-metadata
```

To generate documentation:

```bash
 gulp generate-documentation
```

Or, to run both simultaneously, you can just run:

```bash
 gulp generate
```

Now that we've run our tests and they've passed, let's publish our component so we can use it again in Your-Awesome-App on [NPM] (https://docs.npmjs.com/getting-started/publishing-npm-packages). You will need to [sign up] (https://www.npmjs.com/signup) for an account if you do not have one and follow the steps in the [NPM documentation] (https://docs.npmjs.com/getting-started/creating-node-modules).


Let's continue to build more by creating our own [Hapi server plugin](build_server_plugin.html), incorporating routes and adding some awesome CSS modules.
