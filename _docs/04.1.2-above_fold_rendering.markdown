---
title:  "Above The Fold Rendering"
permalink: docs/above_fold_rendering.html
toplevel: "Stand Alone Modules"
---

The [above-the-fold-rendering-module](https://github.com/electrode-io/above-the-fold-only-server-render) is a React component for optionally skipping server side rendering of components outside above-the-fold (or outside of the viewport). This component helps render your components on the server that are above the fold and the remaining components on the client.

[Above-the-fold-only-server-render](https://github.com/electrode-io/above-the-fold-only-server-render) is a *standalone* module. It is *agnostic* of your web-server framework. In this tutorial we will demonstrate how to use this module in Electrode, Express.js and Hapi.js applications.

### Why do we need this module?

[Above-the-fold-only-server-render](https://github.com/electrode-io/above-the-fold-only-server-render) helps increase performance both by decreasing the load on [renderToString](https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostring) and sending the end user a smaller amount of markup.

The table below outlines a clear performance increase in the example app by skipping server rendering of the `Footer` component and several other below the fold zones on [Walmart.com](http://www.walmart.com):

Performance Improvement Numbers below:

![above-the-fold-table](/img/above-the-fold-table.png)

{% include module_usage.md moduleId="above-the-fold-only-server-render" express=true hapi=true %}

By default, the [above-the-fold-only-server-render](https://github.com/electrode-io/above-the-fold-only-server-render) component is an exercise in simplicity; high-level it returns the child component.

You can tell the component to skip server side rendering either by passing a `skip={true}` prop or by setting up `aboveTheFoldOnlyServerRender` in your app context and passing the component a `contextKey` prop.

You can selectively choose to not server side render a component by passing a `skip prop`:

```js

const SomeComponent = () => {
  return (
    <AboveTheFoldOnlyServerRender skip={true}>
      <div>This will not be server side rendered.</div>
    </AboveTheFoldOnlyServerRender>
  );
};

```

You can also skip server side rendering by `setting context in your app and passing a contextKey prop`:

```js

const SomeComponent = () => {
    return (
      <AboveTheFoldOnlyServerRender contextKey="aboveTheFoldOnlyServerRender.SomeComponent">
        <div>This will not be server side rendered based on the context.</div>
      </AboveTheFoldOnlyServerRender>
    );
};

class SomeApp extends React.Component {
  getChildContext() {
    return {
      aboveTheFoldOnlyServerRender: {
        SomeComponent: true
      }
    };
  }

  render() {
    return (
      <SomeComponent />
    );
  }
}

SomeApp.childContextTypes = {
  aboveTheFoldOnlyServerRender: React.PropTypes.shape({
    AnotherComponent: React.PropTypes.bool
  })
};

```

## Supported Platforms

This module is web-server Platform agnostic can be used with your favorite node.js server framework [Electrode](https://github.com/electrode-io/electrode-boilerplate-universal-react-node), [Express.js](https://github.com/electrode-io/express-example-with-standalone-electrode-modules), or [Hapi.js](https://github.com/electrode-io/hapijs-example-with-standalone-electrode-modules).
