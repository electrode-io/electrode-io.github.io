---
title:  "Further Reading"
permalink: docs/further_reading.html
toplevel: "Resources"
---

<br>
#### Universal Javascript

*  [Universal Javascript](https://medium.com/@mjackson/universal-javascript-4761051b7ae9#.vql04qjs4) - Defining things is hard: this articles outlines what Universal Javascript is and isn't. Naming things is hard: why developers are moving away from the term "Isomorphic".

*  [Why Everyone is Talking About Isomorphic / Universal JavaScript and Why it Matters](https://medium.com/capital-one-developers/why-everyone-is-talking-about-isomorphic-universal-javascript-and-why-it-matters-38c07c87905#.ut4ggn60w) - Short overview of the history of web development + why Universal Javascript is awesome.

*  [Isomorphic JavaScript: The Future of Web Apps](http://nerds.airbnb.com/isomorphic-javascript-future-web-apps) - An overview of airbnb's case for Isomorphic (Universal) Javascript.

#### React

*  [React How To](https://github.com/petehunt/react-howto) - Info about the React ecosystem.

*  [Thinking in React](https://facebook.github.io/react/docs/thinking-in-react.html) + [Design Principles](https://facebook.github.io/react/contributing/design-principles.html) - Read the React docs.

*  [Building React.js at Enterprise Scale](https://medium.com/walmartlabs/building-react-js-at-enterprise-scale-17c17a36fd1f#.ewkzubo8i) - Why ReactJS + [WalmartLabs](http://www.walmartlabs.com) are a perfect match.

*  [Presentational and Container Components](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.ma6icgu8p) A simple, but critical pattern for your React applications.

#### Redux

*  [A Cartoon Intro to Redux](https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6#.cj6szcbtd) - Essential Redux content + cartoons = Awesome!

*  [Getting Started with Redux](https://egghead.io/courses/getting-started-with-redux) + [Building React Applications with Idiomatic Redux](https://egghead.io/courses/building-react-applications-with-idiomatic-redux) - This is a video series, but a great Redux introduction from the library's creator.

*  [Understanding Redux (Or, How I Fell in Love with a JavaScript State Container)](https://medium.com/@thejenniekim/understanding-redux-or-how-i-fell-in-love-with-a-javascript-state-container-5d940fcc10b3#.r2dui841u) - A high level synopsis of Redux with bonus links to other great resources.

#### Universal Rendering

*  [ReactJS SSR Profiling + Caching](https://medium.com/walmartlabs/reactjs-ssr-profiling-and-caching-5d8e9e49240c#.yqnmwbp6t) - Outlines the [WalmartLabs](http://www.walmartlabs.com) Server Side Rendering challenges + ways to solve this.

*  [Server-Side Rendering With React, Node And Express](https://www.smashingmagazine.com/2016/03/server-side-rendering-react-node-express/) - A fast and clear explanation about the general advantages of SSR.

#### Deployments

*  [How to Deploy Software](https://zachholman.com/posts/deploying-software) - Why the deployment process is complex, can be painful, and the solutions.

*  [Enterprise NodeJS On OneOps](https://medium.com/walmartlabs/enterprise-nodejs-on-oneops-f4bc7b1050cc#.sfsslnetq) - An overview of Node.js on WalmartLabs open-source deployment platform [OneOps](http://www.oneops.com/).

#### Testing

*  [Approaches to testing React components - an overview](http://reactkungfu.com/2015/07/approaches-to-testing-react-components-an-overview/) - A general overview to React testing with pros + cons.

*  [Mocha.js: Simple, Flexible Fun](https://mochajs.org/) The Mocha docs, helping to make sense of asynchronous testing.

*  [Enzyme: JavaScript Testing utilities for React](https://medium.com/airbnb-engineering/enzyme-javascript-testing-utilities-for-react-a417e5e5090f#.eo79bodrj) - An overview of Enzyme with code examples.


#### CSS Modules

*  [CSS Modules: Welcome to the Future](http://glenmaddern.com/articles/css-modules) - Overview of CSS modules + the problems they attempt to solve.

*  [Modular CSS with React](https://medium.com/@pioul/modular-css-with-react-61638ae9ea3e#.b5d00dcwp) - Blog about the business case for and implementation of CSS modules.

*  [Understanding the CSS Modules Methodology](https://www.sitepoint.com/understanding-css-modules-methodology/) - Outlines the 'what' and 'why' of CSS modules and shares a few important gotchas.

#### Babel + ES6

*  [Babel Docs](https://babeljs.io/docs/learn-es2015/) - The Babel docs, guides, and blog are very user friendly.

*  [A Quick Tour Of ES6 (Or, The Bits Youâ€™ll Actually Use)](http://jamesknelson.com/es6-the-bits-youll-actually-use/) - Highlights the commonly used parts of the ES6 syntax.
