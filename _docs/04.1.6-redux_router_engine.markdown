---
title:  "Redux Router Engine"
permalink: docs/redux_router_engine.html
toplevel: "Stand Alone Modules"
---

Electrode Redux Router Engine handles async data for React Server Side Rendering using [react-router], Redux, and the [Redux Server Rendering] pattern.

{% include module_usage.md moduleId="electrode-redux-router-engine" express_react_redux=true hapi_react_redux=true %}

### react-router

To use the redux-router engine, you first need to specify your routes according to [react-router]'s specs.

For example, a typical `routes.jsx` file might look like this:

```js
import { Route, IndexRoute, Redirect } from "react-router";

export default (
  <Route path="/test" component={Page}>
    <IndexRoute component={Home}/>
    <Redirect from="source" to="target" />
  </Route>
);
```

### redux-router

A corresponding redux-router configuration (using the [Redux Async Actions] pattern) in a server-side component would create the redux store and connect it with a promise library (the example below uses [bluebird](https://github.com/petkaantonov/bluebird/)) to create an initializer. The `ReduxRouterEngine` is created using this initializer and the `routes.jsx` component. The engine can then be used within a route handler to return the HTML. An example usage follows:

```javascript
const ReduxRouterEngine = require("electrode-redux-router-engine");

function createReduxStore(req, match) {
    // this refs to engine
    const store = configureStore();

    return Promise.all([
      store.dispatch(boostrapApp())
      // dispatch any other asynchronous actions here
    ]).then( () => {
      return store;
    });
}

const routes = require("./routes");
const engine = new ReduxRouterEngine({routes, createReduxStore});

// express or Hapi route handler:
function handler(req, res) {
  engine.render(req)
    .then( (result) => {
      // TODO: send full HTML with result back using res
    });
}
```

Note the route handler configuration above is a stub in this case. In an Electrode app, this handler could be as simple as returning the result of `engine.render(req)`; in a Hapi or Express app, the route handler would be more complex.

### Electrode

In an Electrode app, configuration is straightforward: the store is initialized and wired in a similar fashion as the above example, but the route handling logic simply returns the output of the engine's `render` function in the `module.exports` clause:

#### Example `server/views/index-view.jsx` configuration

```javascript
import ReduxRouterEngine from 'electrode-redux-router-engine';
import { routes } from "../../client/routes";
const Promise = require("bluebird");
import { createStore } from "redux";

let rootReducer = (s, a) => s;

function createReduxStore(req, match) {

  let initialState = {};
  const store = createStore(rootReducer, initialState);

  return Promise.all([
      // DO ASYNC THUNK ACTIONS HERE : store.dispatch(boostrapApp())
      Promise.resolve({})
    ]).then(() => {
      return store;
  });
}

module.exports = (req) => {

  if (!req.server.app.routesEngine) {
    req.server.app.routesEngine = new ReduxRouterEngine({ routes, createReduxStore });
  }

  return req.server.app.routesEngine.render(req);
};
```

## API

### [constructor(options)]()

Where options could contain the following fields:

  - `routes` - **required** The react-router routes
  - `createReduxStore` - **required** async callback that returns a promise resolving to the Redux store.
    - It should take `(req, match)` arguments where match is react-router's match result.
    - If it's a `function` then its `this` references the engine instance.
  - `withIds` - **optional** boolean to indicate whether to render with react-dataids.
  - `stringifyPreloadedState` **optional** callback to return string for the preloaded state
  - `logError` - **optional** callback to log any error
    - It should take `(req, err)` arguments
    - If it's a `function` then its `this` references the engine instance
  - `renderToString` - **optional** callback to provide custom renderToString
    - It should take `(req, store, match, withIds)` arguments

### [engine.render(req, options)]()

Method to render a route.

  - `req` - express/Hapi request object
  - `options` - override options passed to constructor
    - `withIds`
    - `stringifyPreloadedState`
    - `createReduxStore`

If rendering the route is a success, then it returns a promise resolving to:

```js
{
  status: 200,
  html: // string from React renderToString,
  prefetch: // string from stringifyPreloadedState
}
```

If an error occured, then it returns a promise resolving to:

```js
{
  status: react-router status or 500,
  message: err.message,
  path: // request path,
  _err: // original error object
}
```

If no route matched, then it returns a promise resolving to:

```js
{
  status: 404,
  message: `router-resolver: Path <path> not found`
}
```

If react-router found a redirect route, then it returns a promise resolving to:

```js
{
  status: 302,
  path: // redirect location
}
```

[Redux Async Actions]: http://redux.js.org/docs/advanced/AsyncActions.html
[Redux Server Rendering]: http://redux.js.org/docs/recipes/ServerRendering.html
[react-router]: https://github.com/reactjs/react-router
