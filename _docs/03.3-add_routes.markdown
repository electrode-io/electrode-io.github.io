---
title:  "Add Routes"
permalink: docs/add_routes.html
toplevel: "Getting Started: Intermediate"
---

###Add Routes

Now that we have our Open Source friends, the ability to have a resource-list house party and a working demo from before, we can continue to quickly build out our components to both handle user interaction on our application and send requests to Hapi Plugin for more friends to our party. We will use [React-Router](https://github.com/ReactTraining/react-router) to create different routes and server different content to our views.

First though, let's grab our published npm module and install it into Your Awesome App:

```bash
  npm i --save your-awesome-npm-module
```

Navigate to `<your-awesome-component>/client/routes.jsx`. Copy, paste and save the code below into this file:

```javascript
  import React from "react";
  import { Route, IndexRoute} from "react-router";
  import { Home } from "./components/home";
  import { YourAwesomeComponent } from "your-awesome-component-module";

  export const routes = (
    <Route path="/" component={Home}>
      <IndexRoute component={YourAwesomeComponent}/>
      <Route path="/invite" component={YourAwesomeComponent}/>
      <Route path="/invite/friendsof/:friendName" component={YourAwesomeComponent}/>
    </Route>
  );
```

Navigate to `<your-awesome-component>/src/components/your-awesome-component.jsx`. Delete the existing code. Copy, paste and save the code below into this file:

```javascript
import React from "react";

import RenderFriend from "./render-friend";
import GuestList from "./guest-list";
import { Link } from "react-router";

export class ResourceList extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      intro: this.props.location.pathname === "/",
      invite: this.props.location.pathname === "/invite",
      friends: []
    };
  }

  componentDidMount() {
    fetch('/friends', {method: 'GET'})
    .then((res) => res.json())
    .then((json) => this.setState({friends: json.friends}))
  }

  componentWillReceiveProps(nextProps) {
    this.setState = {
      intro: nextProps.location.pathname === "/",
      invite: nextProps.location.pathname === "/invite"
    };
  }

  introMessage() {
    return (
      <div>
        <h1>We should have a house party and invite all our friends!</h1>
        <Link to="/invite">Click Here to Make it a Party!</Link>
      </div>
    )
  }

  renderFriends(friends) {
    return friends.length ? friends.map(friend => (<RenderFriend friend={friend} />)) : [];
  }



  render() {
    const { location: { pathname } } = this.props;
    const { friends } = this.state;

    return (
      <div>
        {pathname === "/" && this.introMessage()}
        {pathname === "/invite" && <GuestList invitees={friends}/>}
        {this.renderFriends(friends)}
      </div>
    );
  }
}
```

Navigate to `<your-awesome-component>/src/components/render-friend.jsx`. Copy, paste and save the code below into this file:

```javascript
import React from 'react';

import styles from "../styles/your-awesome-component.css";
import style from "../helpers/graph-styles";

const RenderFriend = ({friend, styleObj}) => {

  let { name, img, profile, size, friends } = friend;
  const parentFriend = { name, img, profile };
  size = !!size ? size : 15;

  const bgImg = {backgroundImage: `url(${img})`};
  let applyStyle = !!styleObj
    ? Object.assign(bgImg, styleObj)
    : Object.assign(bgImg, style('single', size));

  applyStyle = !!friends ? style('container', size) : applyStyle;
  const applyClass = !!friends ? "" : styles.friend;

  const renderFriends = (friends) => {
    let angleVal = (360 / friends.length);
    let rotateVal = 0;

    return friends.map((friend, i, arr) => {
      rotateVal = rotateVal + angleVal;
      return(<RenderFriend friend={friend} styleObj={style('child', size, rotateVal)}/>);
    })
  }

    return (
      <div className={applyClass} style={applyStyle}>
        {!!friends && renderFriends(friends)}
        {!!friends && <RenderFriend friend={parentFriend} styleObj={style('parent', size)}/>}
      </div>
    )
  };

  RenderFriend.propTypes = {
    friend: React.PropTypes.object,
    styleObj: React.PropTypes.object
  };

  export default RenderFriend;
```

Navigate to `<your-awesome-component>/src/components/` folder. Add a file titled `guest-list.jsx` (`<your-awesome-component>/src/components/` Copy, paste and save the code below into this file:

```javascript
  import React, { Component, PropTypes } from "react";

  import styles from "../styles/your-awesome-component.css";

  export default class GuestList extends Component {

    constructor(props){
      super(props);

    }

    renderFriends(friends){
      return friends.map((friend) => (
        <div className={styles.guestName}>
          <input id={friend.name} type="checkbox" checked={friend.invited} onChange={this.props.toggleGuest(friend.name, !friend.invited)}/>
          <label htmlFor={friend.name}>{friend.name}</label>
        </div>
      ))
    }

    render() {
      const { friends } = this.props;

      return(
        <div className={styles.guestList}>
          <h1>Guest List:</h1>
          {this.renderFriends(friends)}
        </div>
      )
    }
  };


  GuestList.propTypes = {
    friends: React.PropTypes.array,
    toggleGuest: React.PropTypes.func
  };
```

You get the idea. Navigate to `<your-awesome-component>/src/styles/guest-list.jsx`. Delete the existing code and copy, paste and save the code below into this file:

```css
  @import url(//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css);

  body {
    font-family: sans-serif;
  }

  p {
      padding: 15px;
  }

  label { font-size: 24px; }
  input[type=checkbox] { display:none; }
  input[type=checkbox] + label:before {
    font-family: FontAwesome;
    display: inline-block;
  }
  input[type=checkbox] + label:before { content: "\f096"; }
  input[type=checkbox] + label:before { letter-spacing: 10px; }
  input[type=checkbox]:checked + label:before { content: "\f046"; }
  input[type=checkbox]:checked + label:before { letter-spacing: 5px; }

  .friend {
    border-radius: 50%;
    background-color: #efefef;
    background-repeat: no-repeat;
    background-position: center;
    background-size: 60%;
  }

  .houseParty {
    background-color: #e2e2ff;
    border-radius: 10px;
  }

  .guestList {
    background-color: white;
    display: inline-block;
    padding-left: 3em;
    padding-right: 3em;
    padding-bottom: 1.5em;
    border-radius: 5px;
    margin: 1em;
  }

  .guestName {
    margin-bottom: .5em;
  }
```

Whew, last step. Create a file called  `<your-awesome-component>/src/helpers/graph-styles.js`. We will discuss this helper more later. Copy, paste and save the code below into this file:

```javascript
  'use strict';

  export default (type, size, rotateVal) => {

    const nodeSize = type === 'child' ? (size / 4) : (size / 2);

    let parentOrSingle = {
      width:  `${nodeSize}em`,
      height: `${nodeSize}em`,
      margin: `-${nodeSize / 2}em`,
      display: `block`,
      position: `absolute`,
      top:  `50%`,
      left: `50%`,
      transform: `translate(0em)`
    };

    switch(type){

      case 'single':
        const singleNode = {
          display: `inline-block`,
          position: `relative`,
          margin: `${nodeSize / 8}em`
        };
        ['width', 'height'].map(prop => singleNode[prop] = parentOrSingle[prop]);
        return singleNode;

      case 'child':
        const childNode = {
          transform: `rotate(${rotateVal * 1}deg) translate(${nodeSize * 2}em) rotate(${(rotateVal * -1)}deg)`,
          backgroundSize: `100%`,
        };
        return Object.assign(parentOrSingle, childNode);

      case 'container':
        return {
          position: `relative`,
          width:  `${size}em`,
          height: `${size}em`,
          padding: `${size * .13}em`,
          borderRadius: `50%`,
          display: `inline-block`,
          margin: `${size * .13}em`
        }

      default:
        return parentOrSingle;
    }
  };
```
Navigate to [Intermediate: Server Config](server_config.html), to learn about [Confippet](confippet.html) and add our Hapi plugin to our server config.
