---
title:  "Build a Server Plugin"
permalink: docs/build_server_plugin.html
toplevel: "Getting Started: Intermediate"
---

###Be Hapi and Build a server plugin

At WalmartLabs, we use [Hapi](http://hapijs.com/) because of it's flexible and robust plugin system. It allows us to modularize our application into isolated pieces of business logic and reusable utilities.

Let's make a deal! Actually, scratch that, let's make a plugin! Plugins are way to extend our server's functionality. Building upon our open source theme, let's make a plugin that retrieves the our Tech Friends for our "resource party."


At their core, plugins are a simple `register` object, that has the signature `function(server, options, next)`. Read more about building plugins from scratch in the [Hapi documentation](http://hapijs.com/tutorials/plugins).

Let's head back to Your Awesome App. Now we can integrate your published `<your-awesome-component` as a node module and build out the app. Navigate to the <your-awesome-app>/server/plugins folder. Make a folder called `friends`. Cd into your new `friends` folder and:

```bash
  touch index.js
```
Your Server file pattern should now look like this:

{% raw  %}
```
  server
    |_plugins
      |_friends
        |_index.js
      |_webapp
        |_index.html
      |_index.js
    |_views
      |_index-view.jsx
    |_index.js
```
{% endraw %}

Navigate to `<your-awesome-app>/server/index.js` Copy, paste and save the code below between `const staticPathsDecor = require("electrode-static-paths");` and `require("babel-register")({`. This is so your app can consume the transpiled CSS modules from your published component:

```javascript
require.extensions[".css"] = () => {
  return;
};
```

It should now look like this:

```javascript
"use strict";

process.on('SIGINT', function () {
  process.exit(0);
});

const config = require("electrode-confippet").config;
const staticPathsDecor = require("electrode-static-paths");

require.extensions[".css"] = () => {
  return;
};

require("babel-register")({
  ignore: /node_modules\/(?!react\/)/
});

require("electrode-server")(config, [staticPathsDecor()]);
```

Navigate to `<your-awesome-app>/server/plugins/friends/index.js` Copy, paste and save the code below:

```javascript
  'use strict';

  //a very simple plugin
  exports.register = (server, options, next) => {

      const friendsArr = JSON.stringify({friends: [
        {name: "electrode", img: "//goo.gl/CZ4wAF", size: 12},
        {name: "hapi", img: "//goo.gl/q9uIFW", size: 12},
        {name: "React", img: "//goo.gl/dL5MXT", size: 12},
        {name: "Redux", img: "//goo.gl/L0mLmT", size: 12},
        {name: "Webpack", img: "//goo.gl/2AV3Dn", size: 12},
        {name: "wizard", img: "//goo.gl/UdhbKO", size: 12}
      ]});

      server.route({
          method: 'GET',
          path: '/friends',
          handler: function (request, reply) {
              reply(friendsArr);
          }
      });

      next();
  };

  exports.register.attributes = {
    name: 'getFriends',
    version: '1.0.0'
  };

```

A great tool for testing your server requests (it's user interface for view response objects and errors is incredible) is [Postman]("https://www.getpostman.com/"). For now, you will have to trust as we build out Your Awesome App. Navigate to [Intermediate: Add Routes](add_routes.html), to add routing to the app and also extend our UI to display our contributor array.
