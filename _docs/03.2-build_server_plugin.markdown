---
title:  "Build a Server Plugin"
permalink: docs/build_server_plugin.html
toplevel: "Getting Started: Intermediate"
---

###Be Hapi and Build a server plugin

At WalmartLabs, we use [Hapi] (http://hapijs.com/) because of it's flexible and robust plugin system. It allows us to modularize our application into isolated pieces of business logic and reusable utilities.

Let's make a deal! Actually, scratch that, let's make a plugin! Plugins are way to extend our server's functionality. Building upon our open source theme, let's make a plugin that retrieves the Github contributors of our "party friends."

We are going to use the [GitHub Api] (https://developer.github.com/v3/) to grab the latest 10 contributors of our Open Source friends and display them in Your Awesome App.

The GitHub [site] (https://developer.github.com/v3/) has great documentation and awesome libraries to help jumpstart our plugin. Let's begin there by installing a Node.js wrapper called [Node-github] (https://github.com/mikedeboer/node-github):

```bash
npm install github
```

At their core, plugins are a simple `register` object, that has the signature `function(server, options, next)`. Read more about building plugins from scratch in the [Hapi documentation] (http://hapijs.com/tutorials/plugins). For now, navigate to the <your-awesome-app>/server/plugins folder. Make a folder called `GitHub`. Cd into your new `GitHub` folder and:

```bash
touch github.js && index.js
```

Navigate to github.js. This is where we will make an external API call to Github and request the last ten contributors of our selected Open Source 'friend' using a URL `https://api.github.com/ + /repos/:user/:repo/contributors`. Because we are looking at public repos we do not have to go through the process of oAuth to access GitHub data. Our GitHub wrapper [library](https://github.com/mikedeboer/node-github) will allow us a built in method, `github.repos.getContributors({})` to streamline this process and return an array of Open Source contributors. We will also use [Bluebird](http://bluebirdjs.com/docs/getting-started.html), a Promise library that makes working with our async API calls much more manageable.  Copy, paste and save the code below:

```javascript
'use strict';

//my simple plugin requires the GitHub api
const github = require('github');
const Promise = require("bluebird");
const Config = require("electrode-confippet").config;
const newGithub = new GitHubApi(Config.githubApi);
//github call

let guestList = [];

const friendInfo = (githubRepo, githubUrl) => {
  return {
    avatar: githubRepo.avatar_url,
    link: githubRepo.html_url
  };
};

const githubInfo = {
  user: org,
  repo: friend,
  anon: true,
  page: 1,
  per_page: 10
};

const myGitHubFriendPlugin = (org, friend) => {

  github.repos.getContributors(githubInfo, (err, response) {

      if (err) {
        return reply("Error").code(err.code || 500);
      }

      const githubCollaborators = JSON.stringify(response.content);

      reply({githubCollaborators});
  });
};

myGitHubFriendPlugin.register.attributes = {
  name: 'myGitFacePlugin',
  version: '1.0.0'
};

module.exports = myGitHubFriendPlugin;
```

A great tool for testing your server requests (it's user interface for view response objects and errors is incredible) is [Postman]("https://www.getpostman.com/"). For now, you will have to trust as we build out Your Awesome App. Navigate to [Intermediate: Add Routes]('#'), to add routing to the app and also extend our UI to display our contributor array.
