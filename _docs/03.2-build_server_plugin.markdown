---
title:  "Build a Server Plugin"
permalink: docs/build_server_plugin.html
toplevel: "Getting Started: Intermediate"
---

###Be Hapi and Build a server plugin

At WalmartLabs, we use [Hapi](http://hapijs.com/) because of its flexible and robust plugin system. It allows us to modularize our application into isolated pieces of business logic and reusable utilities.

Let's make a deal! Actually, scratch that, let's make a plugin! Plugins are way to extend our server's functionality. Building upon our open source theme, let's make a plugin that retrieves the our Tech Friends for our "resource party."

We are going to use the [GitHub Api] (https://developer.github.com/v3/) to grab the latest 10 contributors of our Open Source friends and display them in Your Awesome App.

The GitHub [site] (https://developer.github.com/v3/) has great documentation and awesome libraries to help jumpstart our plugin. Let's begin there by installing a Node.js wrapper called [Node-github] (https://github.com/mikedeboer/node-github):

```bash
npm install github
```

At their core, plugins are a simple `register object`, that has the `signature function(server, options, next)`. Read more about building plugins from scratch in the [Hapi documentation](http://hapijs.com/tutorials/plugins).

Let's head back to Your Awesome App. Navigate to the <your-awesome-app>/server/plugins folder. Make a folder called `friends`. Cd into your new `friends` folder and:

```bash
  touch index.js
```
Your Server file pattern should now look like this:

{% raw  %}
```
  server
    |_plugins
      |_friends
        |_index.js
      |_webapp
        |_index.html
      |_index.js
    |_views
      |_index-view.jsx
    |_index.js
```
{% endraw %}

Navigate to `<your-awesome-app>/server/plugins/friends/index.js`. This is where we will make an external API call to Github and request the last ten contributors of our selected Open Source 'friend' using a URL `https://api.github.com/ + /repos/:user/:repo/contributors`. Because we are looking at public repos we do not have to go through the process of oAuth to access GitHub data. Our GitHub wrapper [library](https://github.com/mikedeboer/node-github) will allow us a built in method, `github.repos.getContributors({})` to streamline this process and return an array of Open Source contributors. We will also use [Bluebird](http://bluebirdjs.com/docs/getting-started.html), a Promise library that makes working with our async API calls much more manageable. Copy, paste and save the code below:

```javascript
  'use strict';

  //a very simple plugin
  const Promise = require("bluebird");
  const GitHubApi = require("github");
  const github = new GitHubApi();
  const AUTH_TOKEN = process.env.token;
  github.authenticate({
    type: "oauth",
    token: AUTH_TOKEN
  });
  const githubGetContributors = Promise.promisify(github.repos.getContributors);

  exports.register = (server, options, next) => {

    const friendsArr = [
      {name: "electrode", img: "//goo.gl/I9utJF", size: 9, github: "https://github.com/electrode-io/electrode-archetype-react-app"},
      {name: "hapi", img: "//goo.gl/bEBi6G", size: 9, github: "https://github.com/hapijs/hapi"},
      {name: "React", img: "//goo.gl/xwbqlB", size: 9, github: "https://github.com/facebook/react"},
      {name: "Redux", img: "//goo.gl/MGQ3lp", size: 9, github: "https://github.com/reactjs/redux"},
      {name: "Webpack", img: "//goo.gl/zgxe8s", size: 9, github: "https://github.com/webpack/webpack"},
      {name: "node", img: "//goo.gl/hxmCEE", size: 9, github: "https://github.com/nodejs/node"}
    ];

    const getContributorsPromises = friendsArr.map((friend) => {
      let githubUrl = friend.github.split('/');
      const githubInfo = {
        repo: githubUrl.pop(),
        user: githubUrl.pop(),
        anon: true,
        page: 1,
        per_page: 10
      };
      return githubGetContributors(githubInfo)
        .then((response) => {
          friend["friends"] = response.map(({ login, avatar_url, url }) => ({name: login, img: avatar_url, profile: url}));
          return friend;
        })
    });

    const getFriendsAndContributors = (reply) => {
      return Promise.all(getContributorsPromises)
        .then((response) => (reply(null, JSON.stringify({friends: response}))))
        .catch((err) => reply(err))
    };

    server.route({
      method: "GET",
      path: "/friends",
      handler: (request, reply) => getFriendsAndContributors(reply)
    });

    next();
  };

  exports.register.attributes = {
    name: "getFriends",
    version: "1.0.0"
  };

```

A great tool for testing your server requests (it's user interface for view response objects and errors is incredible) is [Postman](https://www.getpostman.com/). For now, you will have to trust as we build out Your Awesome App. Navigate to [Intermediate: Add Routes](add_routes.html), to add routing to the app and also extend our UI to display our contributor array.
